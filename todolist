from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String, Date
from sqlalchemy.orm import sessionmaker
from datetime import datetime, timedelta

engine = create_engine('sqlite:///todo.db?check_same_thread=False')


Base = declarative_base()


class Table(Base):
    __tablename__ = 'task'
    id = Column(Integer, primary_key=True)
    task = Column(String, default='default_value')
    deadline = Column(Date, default=datetime.today())
    def __repr__(self):
        return self.task


Base.metadata.create_all(engine)


Session = sessionmaker(bind=engine)
session = Session()







def program():
    goingon = True
    today = datetime.today()
    rows = session.query(Table).order_by(Table.deadline)
    while goingon:
        user = input("""1) Today's tasks
2) Week's tasks
3) All tasks
4) Missed tasks
5) Add task
6) Delete task
0) Exit\n""")

        if user == "1":
            print()
            print(f"Today {today.day} {today.strftime('%b')}:")
            for row in rows:
                n = 1
                if row.deadline == today:
                    print(f"{n}. {row.task}")
                    n += 1
            if all(row.deadline != today for row in rows):
                print("Nothing to do!")
            print()

        elif user == '2':
            weekdict = {
                0: "Monday",
                1: "Tuesday",
                2: "Wednesday",
                3: "Thursday",
                4: "Friday",
                5: "Saturday",
                6: "Sunday"
            }
            print()

            weeklist = []
            for num in range(7):
                weeklist.append(today + timedelta(days=num))
            for day in weeklist:
                n = 1
                print(f"{weekdict.get(day.weekday())} {day.day} {day.strftime('%b')}")
                for row in rows:
                    if row.deadline == day.date():
                        print(f"{n}. {row.task}")
                        n += 1
                if all(row.deadline != day.date() for row in rows):
                    print("Nothing to do!")
                print()


        elif user == '3':
            print()
            print("All tasks:")
            n = 1
            for row in rows:
                print(f'{n}. {row.task}. {row.deadline.day} {row.deadline.strftime("%b")}')
                n += 1

            print()

        elif user == '4':
            print()
            print("Missed tasks: ")
            dued = session.query(Table).filter(Table.deadline < today).all()
            for row in dued:
                print(f"{row.id}. {row.task}. {row.deadline}")
            if dued == list():
                print("Nothing is missed!")
            print()



        elif user == '5':
            print()
            tasktoadd = input("Enter task\n")
            dateline = input("Enter deadline\n")
            print("The task has been added!\n")
            test = datetime.strptime(dateline, '%Y-%m-%d')
            new_row = Table(task=tasktoadd, deadline=test)
            session.add(new_row)
            session.commit()

        elif user == '6':
            print()
            print(f"Choose the number of the task you want to delete:")
            for row in rows:
                print(f"{row.id}. {row.task}. {row.deadline}")
            to_delete = int(input())
            print()
            for row in rows:
                if row.id == to_delete:
                    session.delete(row)
                    session.commit()
            print("The task has been deleted!\n")

        elif user == '0':
            print()
            print("Bye!")
            goingon = False


program()

